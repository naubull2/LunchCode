#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * Build-time script to generate TypeScript file with embedded starter code content
 * Reads all starter/ files and creates src/data/generatedStarterCode.ts
 */

const PROBLEMS_DIR = path.join(__dirname, '../src/data/problems');
const OUTPUT_FILE = path.join(__dirname, '../src/data/generatedStarterCode.ts');

const languages = ['javascript', 'python', 'java', 'cpp'];
const extensions = { 
  javascript: 'js', 
  python: 'py', 
  java: 'java', 
  cpp: 'cpp' 
};

async function generateStarterCode() {
  console.log('üöÄ Generating starter code from files...');
  
  let output = `// Auto-generated file - DO NOT EDIT MANUALLY
// Generated by scripts/generateStarterCode.js
// This file contains starter code content read from starter/ directories

export interface StarterCodeData {
  [problemId: string]: {
    [language: string]: string;
  };
}

export const STARTER_CODE_DATA: StarterCodeData = {
`;

  try {
    // Read all problem directories
    const problemDirs = fs.readdirSync(PROBLEMS_DIR, { withFileTypes: true })
      .filter(dirent => dirent.isDirectory())
      .map(dirent => dirent.name);

    for (const problemId of problemDirs) {
      const problemPath = path.join(PROBLEMS_DIR, problemId);
      const starterPath = path.join(problemPath, 'starter');
      
      // Check if starter directory exists
      if (!fs.existsSync(starterPath)) {
        console.warn(`‚ö†Ô∏è  No starter directory found for ${problemId}`);
        continue;
      }

      output += `  "${problemId}": {\n`;

      // Read starter code for each language
      for (const language of languages) {
        const extension = extensions[language];
        const filePath = path.join(starterPath, `${language}.${extension}`);
        
        if (fs.existsSync(filePath)) {
          try {
            const content = fs.readFileSync(filePath, 'utf-8');
            // Escape the content for TypeScript string literal
            const escapedContent = content
              .replace(/\\/g, '\\\\')
              .replace(/`/g, '\\`')
              .replace(/\$/g, '\\$');
            
            output += `    ${language}: \`${escapedContent}\`,\n`;
            console.log(`‚úÖ Loaded ${problemId}/${language}.${extension}`);
          } catch (error) {
            console.error(`‚ùå Error reading ${filePath}:`, error.message);
          }
        } else {
          console.warn(`‚ö†Ô∏è  File not found: ${filePath}`);
        }
      }

      output += `  },\n`;
    }

    output += `};

/**
 * Get starter code for a specific problem and language
 * @param problemId - The problem identifier
 * @param language - The programming language
 * @returns The starter code content or undefined if not found
 */
export function getStarterCode(problemId: string, language: string): string | undefined {
  return STARTER_CODE_DATA[problemId]?.[language];
}

/**
 * Get all starter code for a specific problem
 * @param problemId - The problem identifier
 * @returns Object with starter code for each language
 */
export function getAllStarterCode(problemId: string): Record<string, string> {
  return STARTER_CODE_DATA[problemId] || {};
}
`;

    // Write the generated file
    fs.writeFileSync(OUTPUT_FILE, output);
    console.log(`üéâ Generated starter code file: ${OUTPUT_FILE}`);
    console.log(`üìä Processed ${problemDirs.length} problem directories`);

  } catch (error) {
    console.error('‚ùå Error generating starter code:', error);
    process.exit(1);
  }
}

// Run the script
generateStarterCode().catch(error => {
  console.error('‚ùå Script failed:', error);
  process.exit(1);
});
